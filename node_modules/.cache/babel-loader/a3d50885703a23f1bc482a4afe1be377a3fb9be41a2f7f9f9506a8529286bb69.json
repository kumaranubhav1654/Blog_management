{"ast":null,"code":"import _slicedToArray from \"C:/Users/ankit/Downloads/c7zdgf/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\ankit\\\\Downloads\\\\c7zdgf\\\\src\\\\components\\\\BarChart.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { Chart } from \"primereact/chart\";\n// import axios from 'axios'\n\n// export default function BarCharts(props) {\n//   const [chartData, setChartData] = useState({});\n//   const [chartOptions, setChartOptions] = useState({});\n//   const [userData, setuserDataOptions] = useState({});\n//   //console.log(userData);\n//   const map1 = new Map();\n//   for (let x in chartData) {\n//     console.log(\"x = \", chartData[x])\n//     if (isNaN(map1.get(chartData[x].userId))) {\n//       map1.set(chartData[x].userId, 1);\n//     } else {\n//       map1.set(chartData[x].userId, map1.get(chartData[x].userId) + 1);\n//     }\n//   }\n//   //console.log(\"map = \", map1);\n//   useEffect(() => {\n//     axios\n//       .get(`${baseURL}/posts`)\n//       .then((res) => {\n//         setChartData(res.data);\n//       })\n//       .catch((err) => {\n//         console.log(err);\n//       });\n//     const data = {\n//       labels: Array.from(map1.keys()),\n//       datasets: [\n//         {\n//           label: \"No. of Posts VS User\",\n//           data: Array.from(map1.values()),\n//           backgroundColor: [\n//             \"rgba(255, 159, 64, 0.2)\",\n//             \"rgba(75, 192, 192, 0.2)\",\n//             \"rgba(54, 162, 235, 0.2)\",\n//             \"rgba(153, 102, 255, 0.2)\"\n//           ],\n//           borderColor: [\n//             \"rgb(255, 159, 64)\",\n//             \"rgb(75, 192, 192)\",\n//             \"rgb(54, 162, 235)\",\n//             \"rgb(153, 102, 255)\"\n//           ],\n//           borderWidth: 1\n//         }\n//       ]\n//     };\n//     const options = {\n//       scales: {\n//         y: {\n//           beginAtZero: true\n//         }\n//       }\n//     };\n\n//     setChartData(data);\n//     setChartOptions(options);\n//   }, []);\n\n//   return (\n//     <div className=\"card\">\n//       <Chart type=\"bar\" data={chartData} options={chartOptions} />\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Chart } from \"primereact/chart\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BarCharts(props) {\n  _s();\n  var _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    chartData = _useState2[0],\n    setChartData = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    chartOptions = _useState4[0],\n    setChartOptions = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    postData = _useState6[0],\n    setpostDataOptions = _useState6[1];\n  var baseURL = \"https://jsonplaceholder.typicode.com\";\n  var map1 = new Map();\n  axios.get(\"\".concat(baseURL, \"/posts\")).then(function (res) {\n    setpostDataOptions(res.data);\n  }).catch(function (err) {\n    console.log(err);\n  });\n  for (var x in postData) {\n    //console.log(\"x = \", props.post[x])\n    if (isNaN(map1.get(postData[x].userId))) {\n      map1.set(postData[x].userId, 1);\n    } else {\n      map1.set(postData[x].userId, map1.get(postData[x].userId) + 1);\n    }\n  }\n  useEffect(function () {\n    var data = {\n      labels: Array.from(map1.keys()),\n      datasets: [{\n        label: \"No. of Posts VS User\",\n        data: Array.from(map1.values()),\n        backgroundColor: [\"rgba(255, 159, 64, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\"],\n        borderColor: [\"rgb(255, 159, 64)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\"],\n        borderWidth: 1\n      }]\n    };\n    setChartData(data);\n    var options = {\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    };\n    setChartOptions(options);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: postData[0] && /*#__PURE__*/_jsxDEV(Chart, {\n      type: \"bar\",\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 7\n  }, this);\n}\n_s(BarCharts, \"6Ev5+KM2mZt1w4c2ogZrkFb/7Rc=\");\n_c = BarCharts;\nvar _c;\n$RefreshReg$(_c, \"BarCharts\");","map":{"version":3,"names":["React","useState","useEffect","Chart","axios","jsxDEV","_jsxDEV","BarCharts","props","_s","_useState","_useState2","_slicedToArray","chartData","setChartData","_useState3","_useState4","chartOptions","setChartOptions","_useState5","_useState6","postData","setpostDataOptions","baseURL","map1","Map","get","concat","then","res","data","catch","err","console","log","x","isNaN","userId","set","labels","Array","from","keys","datasets","label","values","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","className","children","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ankit/Downloads/c7zdgf/src/components/BarChart.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { Chart } from \"primereact/chart\";\r\n// import axios from 'axios'\r\n\r\n// export default function BarCharts(props) {\r\n//   const [chartData, setChartData] = useState({});\r\n//   const [chartOptions, setChartOptions] = useState({});\r\n//   const [userData, setuserDataOptions] = useState({});\r\n//   //console.log(userData);\r\n//   const map1 = new Map();\r\n//   for (let x in chartData) {\r\n//     console.log(\"x = \", chartData[x])\r\n//     if (isNaN(map1.get(chartData[x].userId))) {\r\n//       map1.set(chartData[x].userId, 1);\r\n//     } else {\r\n//       map1.set(chartData[x].userId, map1.get(chartData[x].userId) + 1);\r\n//     }\r\n//   }\r\n//   //console.log(\"map = \", map1);\r\n//   useEffect(() => {\r\n//     axios\r\n//       .get(`${baseURL}/posts`)\r\n//       .then((res) => {\r\n//         setChartData(res.data);\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err);\r\n//       });\r\n//     const data = {\r\n//       labels: Array.from(map1.keys()),\r\n//       datasets: [\r\n//         {\r\n//           label: \"No. of Posts VS User\",\r\n//           data: Array.from(map1.values()),\r\n//           backgroundColor: [\r\n//             \"rgba(255, 159, 64, 0.2)\",\r\n//             \"rgba(75, 192, 192, 0.2)\",\r\n//             \"rgba(54, 162, 235, 0.2)\",\r\n//             \"rgba(153, 102, 255, 0.2)\"\r\n//           ],\r\n//           borderColor: [\r\n//             \"rgb(255, 159, 64)\",\r\n//             \"rgb(75, 192, 192)\",\r\n//             \"rgb(54, 162, 235)\",\r\n//             \"rgb(153, 102, 255)\"\r\n//           ],\r\n//           borderWidth: 1\r\n//         }\r\n//       ]\r\n//     };\r\n//     const options = {\r\n//       scales: {\r\n//         y: {\r\n//           beginAtZero: true\r\n//         }\r\n//       }\r\n//     };\r\n\r\n//     setChartData(data);\r\n//     setChartOptions(options);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"card\">\r\n//       <Chart type=\"bar\" data={chartData} options={chartOptions} />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Chart } from \"primereact/chart\";\r\nimport axios from 'axios'\r\n\r\nexport default function BarCharts(props) {\r\n  const [chartData, setChartData] = useState({});\r\n  const [chartOptions, setChartOptions] = useState({});\r\n  const [postData, setpostDataOptions] = useState([]);\r\n  const baseURL = \"https://jsonplaceholder.typicode.com\";\r\n  const map1 = new Map();\r\n\r\n  axios\r\n  .get(`${baseURL}/posts`)\r\n  .then((res) => {\r\n    setpostDataOptions(res.data);\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n  for (let x in postData) {\r\n    //console.log(\"x = \", props.post[x])\r\n    if (isNaN(map1.get(postData[x].userId))) {\r\n      map1.set(postData[x].userId, 1);\r\n    } else {\r\n      map1.set(postData[x].userId, map1.get(postData[x].userId) + 1);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const data = {\r\n      labels: Array.from(map1.keys()),\r\n      datasets: [\r\n        {\r\n          label: \"No. of Posts VS User\",\r\n          data: Array.from(map1.values()),\r\n          backgroundColor: [\r\n            \"rgba(255, 159, 64, 0.2)\",\r\n            \"rgba(75, 192, 192, 0.2)\",\r\n            \"rgba(54, 162, 235, 0.2)\",\r\n            \"rgba(153, 102, 255, 0.2)\"\r\n          ],\r\n          borderColor: [\r\n            \"rgb(255, 159, 64)\",\r\n            \"rgb(75, 192, 192)\",\r\n            \"rgb(54, 162, 235)\",\r\n            \"rgb(153, 102, 255)\"\r\n          ],\r\n          borderWidth: 1\r\n        }\r\n      ]\r\n    };\r\n    setChartData(data);\r\n    const options = {\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true\r\n        }\r\n      }\r\n    };\r\n\r\n    \r\n    setChartOptions(options);\r\n  }, [data]);\r\n\r\n  return (\r\n      <div className=\"card\">\r\n      { postData[0] && (<Chart type=\"bar\" data={chartData} options={chartOptions} />)}\r\n    </div>\r\n    \r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}